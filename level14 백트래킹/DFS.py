# DFS(Depth-First Search)

# DFS는 깊이 우선 탐색이라고도 부르며 그래프에서 깊은 부분을
# 우선적으로 탐색하는 알고리즘

# DFS는 스택 자료구조(혹은재귀 함수)를 이용하며, 구체적인 동작과정
# 은 다음과 같음


# 1. 탐색 시작 노드를 스택에 삽입하고 방문 처리를 함
# 2. 스택의 최상단 노드에 방문하지 않은 인접한 노드가 하나라도 
# 있으면 그 노드를 스택에 넣고 방문 처리함
# 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼냄

# 3. 더이상 2번의 과정을 수행할수 없을때 까지 반복


# 방문기준은 문제에따라 다름

# 번호가 낮은 인접노드부터 방문하는경우

# 시작노드가 1이라면 
# 시작노드인 1을 스택에 넣고
# 가장 작은노드인 2를 스택에 넣고 방문처리함
# 다시 2에서 부터 출발 -> 2를 기준으로 DFS 수행
# 깊이 우선이기 떄문에 더이상 들어갈수없으면 나와서 다른 방향으로
# pop 수행후 다른 인접 노드로 감 

#그래프를 표현하기 위해 2차원 리스트로 구현
# 각 노드가 연결된 정보를 표현
# 노드의 번호가 1부터 시작하는 경우가 많아서 index0을 비어줌
# 1번 인덱스부터 해당 노드에 인접한 노드가 무엇인지 리스트 형태로
# 담아둠 1번 노드와 연결된것은 2,3,8번 2번노드와 연결된것은 1,7번

def dfs(graph, v, visited):
    #그래프에 대한 정보, 방문처리를 하기위한 리스트 사용
    visited[v] = True
    #현재 노드를 방문처리
    print(v,end=' ') #현재 노드 번호 출력

    for i in graph[v]:
        #print('i',i)
        if not visited[i]: #방문하지 않았으면 -> False면 
            dfs(graph, i, visited)
    # 현재 노드와 즉 스택의 최상단에 있는 노드와 연결된 다른
    # 노드를 하나씩 확인하면서 만약 그 노드가 즉 인접한 노드가
    # 방문되지 않은 상태라면 그 노드에 대해서도 재귀함수를 이용해
    # 방문할수있음



graph =[[],
[2,3,8],
[1,7],
[1,4,5],
[3,5],
[3,4],
[7],
[2,6,8],
[1,7]
]
#https://www.youtube.com/watch?v=7C9RgOcvkvo

visited = [False]*9
# 각노드가 방문된 정보를 표현 (1차원 리스트) -> 방문처리 하기 위해
# 방문노드를 False값으로 초기화 
# 1번노드부터 8번 노드까지 가지고 있기때문에 0번은 사용하지 않으므로
# 일부로 이렇게 하나더 큰 크기로 1차원 리스트를 초기화함 

dfs(graph,1,visited)