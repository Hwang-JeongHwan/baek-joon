# 주어진 문제가 다이나믹 프로그래밍 유형임을 파악하는것이 중요

# 가장먼저 그리디 구현 완전탐색(brute force, BFS, DFS등등)등의 아이디어로 문제를 해결할 수 있는지 검토할수있음

# 다른 알고리즘으로 풀이 방법이 떠오르지 않으면 다이나믹 프로그래밍을 고려해 보자
# ex) 완전탐색을 이용했을때 너무 많은 시간복잡도가 소요된다라고 판단이 되면 그때 
# 다이나믹 프로그래밍을 사용할수있는지 판단
# 어떤 문제가 주어졌을때 이 문제가 작은문제를 조합해서 큰 문제를 해결할수 있는 형태를
# 가지며 부분문제가 중복되는 형태를 가지면 다이나믹 프로그래밍으로 해결

# 일단 재귀 함수로 비효율적인 완전 탐색 프로그램을 작성한 뒤에 (탑다운)작은 문제에서
# 구한 답이 큰 문제에서 그대로 사용될 수 있으면 코드를 개선하는 방법을 사용할 수 있음
# 현재 코드에 메모이제이션 기법을 추가하여 한번 계산된 결과가 별도의 리스트 혹은
# 배열에 담기도록하여 코드를 개선하는 방법으로 문제를 해결할수있음

# 일반적인 코딩 테스트 수준에서는 기본 유형의 다이나믹 프로그래밍 문제가 출제되는
# 경우가 많음 
# 다이나믹 프로그래밍 문제는 처음 접했을때 어렵고 헷갈리게 느낄수 있지만
# 반복적인 연습을 통해 많은 문제를 접해보면 이런 유형에 익숙해질수있음

