package Javastudy;
// 사용자 정의 Exception
// Exception 클래스가 이미 자바에서 정의해 놓은 클래스들이 사용될수 있고 사용자가 직접
// Exception을 정의해서 사용할수 있음 사용자는 Exception이나 RuntimeException이라는
// 클래스를 상속을 받아서 새로운 exception클래스를 만들수 있고
// 이런 새로운 익셉션 클래스를 만드는 이유는 익셉션 클래스가 특별한 일을 하는건 아니지
// 만 이름만 봐도 어떤 오류가 발생했구나 라는 것을 직관적으로 사용자에게 알게하려는
// 목적을 가짐
// Exception을 상속받은 클래스들은 CheckedException 이라고 하고 Exception을 처리하지
// 않으면 컴파일 에러가 발생하므로 반드시 오류를 처리해야 되는 익셉션들을 얘기함

// 그이외의 RuntionException들을 상속받아서 가지고 있는 익셉션들은 오류처리를 반드시
// 하지 않아도 컴파일상에서 오류를 발생시키지 않음
// 그런데 모든 예외 상황에 대해서는 적적하게 처리를 해주는 것이 프로그램이 실행될때
// 좀더 안정적으로 수행이 될수 있게 도와줄수 있음 
public class BizException extends RuntimeException{
    // 만약 비즈 서비스라는 클래스가 있다고 가정
    // 비즈 서비스라는 클래스는 업부와 관련된 기능을 가지고 있음
    // 이런 업무와 관련된 메소드를 비즈니스 메소드라고 함
    // 그렇다면 업무와 관련된 메소드가 실행될때 오류가 발생하면 해당 메소드는 업무와
    // 관련된 익셉션이 발생했다고 해당 메소드를 호출한 쪽에게 알려야함
    // Exception객체를 직접 정의
    // 비즈니스가 수행될때 발생된 익셉션
    // 익셉션을 만드는 방법은 익셉션을 상속받으면 됨
    // RuntimeException을 상속받으면 unCheckedExption으로 생성할 수 있음
    
    // 익셉션 객체에는 생성자만 만들어주면됨 
    public BizException(String msg){
        super (msg);
    }

    // 비즈 익셉션에서 어떤 오류가 발생했는지 String값으로 메세지를 가지고 들여오는
    // 생성자를 하나 만들어봄
    
    public BizException(Exception ex){
        super(ex);
        // 해당 익셉션을 부모의 생성자에게 넘겨줄 수 있는 생성자 정의
    }
    // 문자열로 된 오류 메세지와 실제 발생할 익셉션을 담는 목적의 생성자 2개를 생성
    // 이미 부모 클래스가 같은 기능을 가지고 있는 생성자가 있기 때문에 사용자가
    // 정의한 익셉션 객체에서 따로 해줄일은 없고
    // 해당 생성자를 부모의 생성자에게 전달만 해주면됨. 
    //super메소드에 매개변수로 전달받은 값만 보내주면 됨 


}
